name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)
# Pipeline triggers on any branch and tag
trigger:
  branches:
    include:
      - 'main'
  tags:
    include:
      - '*'
  paths:
    exclude:
      - docker/jupyterhub
      - docker/spark-py
      - docker/spark-r

schedules:
  - cron: "0 12 1 * *"
    displayName: Monthly build
    branches:
      include:
        - main
    always: true

resources:
  repositories:
    - repository: templates
      type: github
      name: statisticsnorway/azure-pipelines-templates
      ref: refs/tags/1.1.27
      endpoint: statisticsnorway

    # Pipeline will be run on this base image
pool:
  name: 'extended_storage'

# Variables global to this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
variables:
  # Variables defined in Pipelines->Library->Variable Groups in your project in
  # Azure Pipelines
  - group: Hemmeligheter
  # Variables defined here
  - name: fullSha
    value: '$(Build.SourceVersion)'
  - name: imageHost
    value: 'https://eu.gcr.io/'
  - name: imageName
    value: 'eu.gcr.io/prod-bip/ssb/dapla/dapla-jupyterlab'
  - name: repoName
    value: 'prod-bip/ssb/dapla/dapla-jupyterlab'
  - name:  MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  - name: imageTagBeforeVulnerabilityScan
    value: 'imagescan-$(Build.SourceBranchName)-$(Build.SourceVersion)'
  - name: imageTagAfterVulnerabilityScan
    value: '$(Build.SourceBranchName)-$(Build.SourceVersion)'
  - name: imageTagLatest
    value: '$(Build.SourceBranchName)-latest'
  - name: timeBetweenRetriesVulnerabilityScan
    value: '15000'
  - name: DECODE_PERCENTS
    value: false

jobs:
  - job: pullJavaDependencies
    displayName: 'Pull java dependencies from Maven'
    container: maven:3-jdk-11
    # Job condition: Run these jobs on any branch, but not on tags
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

    # Steps in this Job
    steps:

      # Authenticate to Google Artifact Registry
      - template: maven/task-authenticate-gar.yml@templates

      # Maven caching to speed up pipeline build time
      - template: maven/task-cache.yml@templates

      - task: Maven@3
        displayName: 'Maven build'
        inputs:
          mavenPomFile: 'build/pom.xml'
          goals: 'clean package'
          options: '-DskipTests=true -Dmaven.javadoc.skip=true -U -P ssb-bip --batch-mode -Djdk.tls.client.protocols="TLSv1.2" $(MAVEN_OPTS)'
          publishJUnitResults: false
          testResultsFiles: '**/TEST-*.xml'
          mavenVersionOption: 'Default'
          mavenOptions: '-Xmx3072m'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
          checkStyleRunAnalysis: false
          pmdRunAnalysis: false

      # Publish pipeline artifact
      - publish: build/target
        displayName: 'Publish artifact to pipeline'
        artifact: spark-java-libs

  - job: pullJupyterlabCommonImage
    displayName: 'Pull jupyterlab-common image'
    continueOnError: true
    # Job condition: Run these jobs on any branch, but not on tags
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    steps:

      # Authenticate Docker to GCR using predefined service connection
      - task: Docker@2
        displayName: 'Login to GCR'
        inputs:
          command: login
          containerRegistry: gcrServiceConnection

      - script: docker pull eu.gcr.io/prod-bip/ssb/statistikktjenester/jupyterlab-common:latest
        displayName: 'Pull latest jupyterlab-common image'


  - job: pullLatestDaplaJupyterlabImage
    displayName: 'Pull latest dapla-jupyterlab image'
    continueOnError: true
    # Job condition: Run these jobs on any branch, but not on tags
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    steps:

      # Authenticate Docker to GCR using predefined service connection
      - task: Docker@2
        displayName: 'Login to GCR'
        inputs:
          command: login
          containerRegistry: gcrServiceConnection

      - script: docker pull ${{ variables.imageName }}:latest
        displayName: 'Pull latest dapla-jupyterlab image'

  # Job which builds Docker image, pushes this to GCR and checks for any image vulnerabilities
  # NOTE: Sub-project pipelines are still running with the root working directory
  - job: dockerBuildAndDockerPush
    timeoutInMinutes: 150 # how long to run the job before automatically cancelling
    condition: eq(False, startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Build Docker image for jupyterlab'
    dependsOn:
      - pullJavaDependencies
      - pullJupyterLabCommonImage
      - pullLatestDaplaJupyterlabImage
    steps:
      # Download pipeline artifact
      - download: current
        displayName: 'Download pipeline artifact'
        patterns: '*.jar'
        artifact: spark-java-libs

      # Copy pipeline artifact into working directory
      - script: cp $(Pipeline.Workspace)/spark-java-libs/*.jar ./docker/jupyterlab
        displayName: 'Copy pipeline artifact into working directory'

      # Authenticate Docker to GCR using predefined service connection
      - task: Docker@2
        displayName: 'Login to GCR'
        inputs:
          command: login
          containerRegistry: gcrServiceConnection

      # Download file with json-key to GCR as a later task needs to
      # authenticate in a different way than using service connection
      # File is stored in Pipelines->Library->Secure Files
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        displayName: 'Download gcr creds'
        inputs:
          secureFile: 'gcr-key.json'

      - script: |
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin ${{ variables.imageHost }}
          docker image prune -af
        displayName: Remove dangling docker images
        continueOnError: true

      # Build Docker final image
      - task: Docker@2
        displayName: 'Build final image'
        inputs:
          repository: ${{ variables.repoName }}
          command: 'build'
          Dockerfile: 'docker/jupyterlab/Dockerfile'
          tags: |
            ${{ variables.imageTagLatest }}
            ${{ variables.imageTagBeforeVulnerabilityScan }}

      # Push Docker Image to GCR
      - task: Docker@2
        displayName: 'Push final image'
        inputs:
          ContainerRegistry: |
            gcrServiceConnection
          repository: ${{ variables.repoName }}
          command: 'push'
          tags: |
            ${{ variables.imageTagLatest }}
            ${{ variables.imageTagBeforeVulnerabilityScan }}

      # Set env variable pointing to the file downloaded in previous task
      # as a library in next task needs this env variable
      - script: |
          echo "Setting env variable GOOGLE_APPLICATION_CREDENTIALS"
          echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(gcrJsonKey.secureFilePath)"
        displayName: 'Setting GOOGLE_APPLICATION_CREDENTIALS env variable'

      # Wait for scan on image in GCR to complete and check for any vulnerabilities
      # with effective severity HIGH or CRITICAL
      #- task: gcr-vulneralbility-check@0
      #  displayName: 'Image vulnerability check'
      #  inputs:
      #    projectId: 'prod-bip'
      #    imageHost: ${{ variables.imageHost }}
      #    image: ${{ variables.repoName }}
      #    imageTag: ${{ variables.imageTagBeforeVulnerabilityScan }}
      #    timeBetweenRetries: ${{ variables.timeBetweenRetriesVulnerabilityScan }}
      #  condition: succeeded()

      - script: |
          TAG=`git describe --tags`
          echo $TAG
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin ${{ variables.imageHost }}
          docker pull ${{ variables.imageName }}:${{ variables.imageTagBeforeVulnerabilityScan }}
          docker tag ${{ variables.imageName }}:${{ variables.imageTagBeforeVulnerabilityScan }} ${{ variables.imageName }}:${{ variables.imageTagAfterVulnerabilityScan }}
          docker push ${{ variables.imageName }}:${{ variables.imageTagAfterVulnerabilityScan }}
        displayName: "Retagging docker image if successful vulnerability scan"
        condition: succeeded()


      # Need to tag 'latest' image (used by docker-tag-for-production)
      - script: |
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin ${{ variables.imageHost }}
          docker pull ${{ variables.imageName }}:${{ variables.imageTagAfterVulnerabilityScan }}
          docker tag ${{ variables.imageName }}:${{ variables.imageTagAfterVulnerabilityScan }} ${{ variables.imageName }}:latest
          docker push ${{ variables.imageName }}:latest
        displayName: "Retagging latest image"
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))


  # Job which pulls the Docker image with the 'latest' tag from GCR, tags this
  # with the git tag, and pushes that back to GCR.
  # The job triggers when any tag was committed to GitHub, which means all tags in
  # the code repo are propagated to the corresponding (newly built) image in GCR.
  - template: docker/docker-tag-for-production.yml@templates
    parameters:
      tagToTag: 'latest'
      gcrImageName: ${{ variables.imageName }}
