.First <- function() {
  home <- Sys.getenv("SPARK_HOME")
  .libPaths(c(file.path(home, "R", "lib"), .libPaths()))
  Sys.setenv(NOAWT = 1)

  # Make sure SparkR package is the last loaded one
  old <- getOption("defaultPackages")
  options(defaultPackages = c(old, "SparkR"))

  r <- getOption("repos")
  r["CRAN"] <- "https://packagemanager.rstudio.com/all/latest"
  options(repos = r)
  rm(r)

  library(utils)
  get_local_ip <- function() {
    return(nsl(Sys.info()["nodename"]))
  }

  generate_k8s_pod_name_prefix <- function() {
    prefix <- paste(Sys.getenv("HOSTNAME"), '-', round(as.numeric(Sys.time())*1000000), '-r', sep="")
    # Max length of pod name in k8s is 63 chars
    # Spark executors are named by the prefix + exec-nn
    # Where nn are number of executors (1-20)
    maxlength = nchar(paste(prefix, "-exec-nn", sep=""))
    return(substr(prefix, maxlength - 63, maxlength))
  }

  spark <- SparkR::sparkR.session(sparkConfig = list(
    spark.submit.deployMode = 'client',
    spark.driver.host = get_local_ip(),
    spark.driver.port = Sys.getenv("SPARK_DRIVER_PORT", "0"),
    spark.blockManager.port = Sys.getenv("SPARK_BLOCKMANAGER_PORT", "0"),
    spark.port.maxRetries = Sys.getenv("SPARK_PORT_MAX_RETRIES", "0"),
    spark.executorEnv.JUPYTERHUB_API_TOKEN = Sys.getenv("JUPYTERHUB_API_TOKEN"),
    spark.kubernetes.executor.podNamePrefix = generate_k8s_pod_name_prefix(),
    spark.kubernetes.driver.pod.name = Sys.getenv("HOSTNAME"))
  )
  assign("spark", spark, envir = .GlobalEnv)
  sc <- SparkR:::callJStatic("org.apache.spark.sql.api.r.SQLUtils", "getJavaSparkContext", spark)
  assign("sc", sc, envir = .GlobalEnv)
  sparkVer <- SparkR:::callJMethod(sc, "version")
  cat("\nWelcome to")
  cat("\n")
  cat("      ____              __", "\n")
  cat("     / __/__  ___ _____/ /__", "\n")
  cat("    _\\ \\/ _ \\/ _ `/ __/  '_/", "\n")
  cat("   /___/ .__/\\_,_/_/ /_/\\_\\")
  if (nchar(sparkVer) == 0) {
    cat("\n")
  } else {
    cat("   version", sparkVer, "\n")
  }
  cat("      /_/", "\n")
  cat("\n")

  cat("\nSparkSession Web UI available at", SparkR::sparkR.uiWebUrl())
  cat("\nSparkSession available as 'spark'(master = ", unlist(SparkR::sparkR.conf("spark.master")),
    ", app id = ", unlist(SparkR::sparkR.conf("spark.app.id")), ").", "\n", sep = "")

}
