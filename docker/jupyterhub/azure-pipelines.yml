name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)
# Pipeline triggers on any branch and tag
trigger:
  branches:
    include:
      - 'main'
  tags:
    include:
      - '*'
  paths:
    include:
      - docker/jupyterhub

schedules:
  - cron: "0 12 1 * *"
    displayName: Monthly build
    branches:
      include:
        - main
    always: true

resources:
  repositories:
    - repository: templates
      type: github
      name: statisticsnorway/azure-pipelines-templates
      ref: refs/tags/0.1.3
      endpoint: statisticsnorway

    # Pipeline will be run on this base image
pool:
  vmImage: 'ubuntu-latest'

# Variables global to this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
variables:
  # Variables defined in Pipelines->Library->Variable Groups in your project in
  # Azure Pipelines
  - group: Hemmeligheter
  # Variables defined here
  - name: fullSha
    value: '$(Build.SourceVersion)'
  - name: imageName
    value: 'eu.gcr.io/prod-bip/ssb/dapla/dapla-jupyterhub'
  - name: repoName
    value: 'prod-bip/ssb/dapla/dapla-jupyterhub'
  - name:  MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  - name: imageTagAfterVulnerabilityScan
    value: '$(Build.SourceBranchName)-$(Build.SourceVersion)'



# Job which builds Docker image, pushes this to GCR and checks for any image vulnerabilities
# NOTE: Sub-project pipelines are still running with the root working directory
jobs:
  - job: dockerBuildAndDockerPush
    displayName: 'Build Docker image for Jupyterhub'
    condition: eq(False, startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    steps:
      - template: docker/docker-build-image-and-push-to-gcr.yml@templates
        parameters:
          project: dapla
          imageName: $(imageName)
          repoName: $(repoName)
          Dockerfile: 'docker/jupyterhub/Dockerfile'
          imageTagAfterVulnerabilityScan: $(imageTagAfterVulnerabilityScan)

      # Need to tag 'latest' image (used by docker-tag-for-production)
      - script: |
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin ${{ variables.imageHost }}
          docker pull ${{ variables.imageName }}:imagescan-${{ variables.imageTagAfterVulnerabilityScan }}
          docker tag ${{ variables.imageName }}:imagescan-${{ variables.imageTagAfterVulnerabilityScan }} ${{ variables.imageName }}:latest
          docker push ${{ variables.imageName }}:latest
        displayName: "Retagging latest image"
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
      # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))


  # Job which pulls the Docker image with the 'latest' tag from GCR, tags this
  # with the git tag, and pushes that back to GCR.
  # The job triggers when any tag was committed to GitHub, which means all tags in
  # the code repo are propagated to the corresponding (newly built) image in GCR.
  - template: docker/docker-tag-for-production.yml@templates
    parameters:
      tagToTag: 'latest'
      gcrImageName: ${{ variables.imageName }}

